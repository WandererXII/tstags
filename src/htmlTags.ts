// DO NOT EDIT
// This file was autogenerated from gen/html5-tags.js
import { TagAttrs, TagData, TagElement, tag } from './tag.js';

/** In HTML, the doctype is the required '<!DOCTYPE html>' preamble found at the top of all documents. Its sole purpose is to prevent a browser from switching into so-called 'quirks mode' when rendering a document; that is, the '<!DOCTYPE html>' doctype ensures that the browser makes a best-effort attempt at following the relevant specifications, rather than using a different rendering mode that is incompatible with some specifications. - MDN */
export function doctype(): string {
  return '<!DOCTYPE html>';
}
/** The Comment interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view. - MDN */
export function comment(text: string): string {
  return `<!--${text}-->`;
}

/** The 'a' HTML element (or anchor element), with its href attribute, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address. - MDN */
export function a(): TagElement;
/** The 'a' HTML element (or anchor element), with its href attribute, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address. - MDN */
export function a(attrs: TagAttrs): TagElement;
/** The 'a' HTML element (or anchor element), with its href attribute, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address. - MDN */
export function a(data: TagData): TagElement;
/** The 'a' HTML element (or anchor element), with its href attribute, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address. - MDN */
export function a(attrs: TagAttrs, data: TagData): TagElement;
export function a(a?: any, b?: any): TagElement {
  return tag('a', a, b);
}

/** The 'abbr' HTML element represents an abbreviation or acronym. - MDN */
export function abbr(): TagElement;
/** The 'abbr' HTML element represents an abbreviation or acronym. - MDN */
export function abbr(attrs: TagAttrs): TagElement;
/** The 'abbr' HTML element represents an abbreviation or acronym. - MDN */
export function abbr(data: TagData): TagElement;
/** The 'abbr' HTML element represents an abbreviation or acronym. - MDN */
export function abbr(attrs: TagAttrs, data: TagData): TagElement;
export function abbr(a?: any, b?: any): TagElement {
  return tag('abbr', a, b);
}

/** The 'address' HTML element indicates that the enclosed HTML provides contact information for a person or people, or for an organization. - MDN */
export function address(): TagElement;
/** The 'address' HTML element indicates that the enclosed HTML provides contact information for a person or people, or for an organization. - MDN */
export function address(attrs: TagAttrs): TagElement;
/** The 'address' HTML element indicates that the enclosed HTML provides contact information for a person or people, or for an organization. - MDN */
export function address(data: TagData): TagElement;
/** The 'address' HTML element indicates that the enclosed HTML provides contact information for a person or people, or for an organization. - MDN */
export function address(attrs: TagAttrs, data: TagData): TagElement;
export function address(a?: any, b?: any): TagElement {
  return tag('address', a, b);
}

/** The 'area' HTML element defines an area inside an image map that has predefined clickable areas. An image map allows geometric areas on an image to be associated with Hyperlink. - MDN */
export function area(): TagElement;
/** The 'area' HTML element defines an area inside an image map that has predefined clickable areas. An image map allows geometric areas on an image to be associated with Hyperlink. - MDN */
export function area(attrs: TagAttrs): TagElement;
export function area(a?: any): TagElement {
  return tag('area', a);
}
/** The 'article' HTML element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry, a product card, a user-submitted comment, an interactive widget or gadget, or any other independent item of content. - MDN */
export function article(): TagElement;
/** The 'article' HTML element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry, a product card, a user-submitted comment, an interactive widget or gadget, or any other independent item of content. - MDN */
export function article(attrs: TagAttrs): TagElement;
/** The 'article' HTML element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry, a product card, a user-submitted comment, an interactive widget or gadget, or any other independent item of content. - MDN */
export function article(data: TagData): TagElement;
/** The 'article' HTML element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry, a product card, a user-submitted comment, an interactive widget or gadget, or any other independent item of content. - MDN */
export function article(attrs: TagAttrs, data: TagData): TagElement;
export function article(a?: any, b?: any): TagElement {
  return tag('article', a, b);
}

/** The 'aside' HTML element represents a portion of a document whose content is only indirectly related to the document's main content. Asides are frequently presented as sidebars or call-out boxes. - MDN */
export function aside(): TagElement;
/** The 'aside' HTML element represents a portion of a document whose content is only indirectly related to the document's main content. Asides are frequently presented as sidebars or call-out boxes. - MDN */
export function aside(attrs: TagAttrs): TagElement;
/** The 'aside' HTML element represents a portion of a document whose content is only indirectly related to the document's main content. Asides are frequently presented as sidebars or call-out boxes. - MDN */
export function aside(data: TagData): TagElement;
/** The 'aside' HTML element represents a portion of a document whose content is only indirectly related to the document's main content. Asides are frequently presented as sidebars or call-out boxes. - MDN */
export function aside(attrs: TagAttrs, data: TagData): TagElement;
export function aside(a?: any, b?: any): TagElement {
  return tag('aside', a, b);
}

/** The 'audio' HTML element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the source element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream. - MDN */
export function audio(): TagElement;
/** The 'audio' HTML element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the source element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream. - MDN */
export function audio(attrs: TagAttrs): TagElement;
/** The 'audio' HTML element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the source element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream. - MDN */
export function audio(data: TagData): TagElement;
/** The 'audio' HTML element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the source element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream. - MDN */
export function audio(attrs: TagAttrs, data: TagData): TagElement;
export function audio(a?: any, b?: any): TagElement {
  return tag('audio', a, b);
}

/** The 'b' HTML element is used to draw the reader's attention to the element's contents, which are not otherwise granted special importance. This was formerly known as the Boldface element, and most browsers still draw the text in boldface. However, you should not use 'b' for styling text; instead, you should use the CSS font-weight property to create boldface text, or the strong element to indicate that text is of special importance. - MDN */
export function b(): TagElement;
/** The 'b' HTML element is used to draw the reader's attention to the element's contents, which are not otherwise granted special importance. This was formerly known as the Boldface element, and most browsers still draw the text in boldface. However, you should not use 'b' for styling text; instead, you should use the CSS font-weight property to create boldface text, or the strong element to indicate that text is of special importance. - MDN */
export function b(attrs: TagAttrs): TagElement;
/** The 'b' HTML element is used to draw the reader's attention to the element's contents, which are not otherwise granted special importance. This was formerly known as the Boldface element, and most browsers still draw the text in boldface. However, you should not use 'b' for styling text; instead, you should use the CSS font-weight property to create boldface text, or the strong element to indicate that text is of special importance. - MDN */
export function b(data: TagData): TagElement;
/** The 'b' HTML element is used to draw the reader's attention to the element's contents, which are not otherwise granted special importance. This was formerly known as the Boldface element, and most browsers still draw the text in boldface. However, you should not use 'b' for styling text; instead, you should use the CSS font-weight property to create boldface text, or the strong element to indicate that text is of special importance. - MDN */
export function b(attrs: TagAttrs, data: TagData): TagElement;
export function b(a?: any, b?: any): TagElement {
  return tag('b', a, b);
}

/** The 'base' HTML element specifies the base URL to use for all relative URLs in a document. There can be only one 'base' element in a document. - MDN */
export function base(): TagElement;
/** The 'base' HTML element specifies the base URL to use for all relative URLs in a document. There can be only one 'base' element in a document. - MDN */
export function base(attrs: TagAttrs): TagElement;
export function base(a?: any): TagElement {
  return tag('base', a);
}
/** The 'bdi' HTML element tells the browser's bidirectional algorithm to treat the text it contains in isolation from its surrounding text. It's particularly useful when a website dynamically inserts some text and doesn't know the directionality of the text being inserted. - MDN */
export function bdi(): TagElement;
/** The 'bdi' HTML element tells the browser's bidirectional algorithm to treat the text it contains in isolation from its surrounding text. It's particularly useful when a website dynamically inserts some text and doesn't know the directionality of the text being inserted. - MDN */
export function bdi(attrs: TagAttrs): TagElement;
/** The 'bdi' HTML element tells the browser's bidirectional algorithm to treat the text it contains in isolation from its surrounding text. It's particularly useful when a website dynamically inserts some text and doesn't know the directionality of the text being inserted. - MDN */
export function bdi(data: TagData): TagElement;
/** The 'bdi' HTML element tells the browser's bidirectional algorithm to treat the text it contains in isolation from its surrounding text. It's particularly useful when a website dynamically inserts some text and doesn't know the directionality of the text being inserted. - MDN */
export function bdi(attrs: TagAttrs, data: TagData): TagElement;
export function bdi(a?: any, b?: any): TagElement {
  return tag('bdi', a, b);
}

/** The 'bdo' HTML element overrides the current directionality of text, so that the text within is rendered in a different direction. - MDN */
export function bdo(): TagElement;
/** The 'bdo' HTML element overrides the current directionality of text, so that the text within is rendered in a different direction. - MDN */
export function bdo(attrs: TagAttrs): TagElement;
/** The 'bdo' HTML element overrides the current directionality of text, so that the text within is rendered in a different direction. - MDN */
export function bdo(data: TagData): TagElement;
/** The 'bdo' HTML element overrides the current directionality of text, so that the text within is rendered in a different direction. - MDN */
export function bdo(attrs: TagAttrs, data: TagData): TagElement;
export function bdo(a?: any, b?: any): TagElement {
  return tag('bdo', a, b);
}

/** The 'blockquote' HTML element indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation (see Notes for how to change it). A URL for the source of the quotation may be given using the cite attribute, while a text representation of the source can be given using the cite element. - MDN */
export function blockquote(): TagElement;
/** The 'blockquote' HTML element indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation (see Notes for how to change it). A URL for the source of the quotation may be given using the cite attribute, while a text representation of the source can be given using the cite element. - MDN */
export function blockquote(attrs: TagAttrs): TagElement;
/** The 'blockquote' HTML element indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation (see Notes for how to change it). A URL for the source of the quotation may be given using the cite attribute, while a text representation of the source can be given using the cite element. - MDN */
export function blockquote(data: TagData): TagElement;
/** The 'blockquote' HTML element indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation (see Notes for how to change it). A URL for the source of the quotation may be given using the cite attribute, while a text representation of the source can be given using the cite element. - MDN */
export function blockquote(attrs: TagAttrs, data: TagData): TagElement;
export function blockquote(a?: any, b?: any): TagElement {
  return tag('blockquote', a, b);
}

/** The 'body' HTML element represents the content of an HTML document. There can be only one 'body' element in a document. - MDN */
export function body(): TagElement;
/** The 'body' HTML element represents the content of an HTML document. There can be only one 'body' element in a document. - MDN */
export function body(attrs: TagAttrs): TagElement;
/** The 'body' HTML element represents the content of an HTML document. There can be only one 'body' element in a document. - MDN */
export function body(data: TagData): TagElement;
/** The 'body' HTML element represents the content of an HTML document. There can be only one 'body' element in a document. - MDN */
export function body(attrs: TagAttrs, data: TagData): TagElement;
export function body(a?: any, b?: any): TagElement {
  return tag('body', a, b);
}

/** The 'br' HTML element produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant. - MDN */
export function br(): TagElement;
/** The 'br' HTML element produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant. - MDN */
export function br(attrs: TagAttrs): TagElement;
export function br(a?: any): TagElement {
  return tag('br', a);
}
/** The 'button' HTML element is an interactive element activated by a user with a mouse, keyboard, finger, voice command, or other assistive technology. Once activated, it then performs a programmable action, such as submitting a form or opening a dialog. - MDN */
export function button(): TagElement;
/** The 'button' HTML element is an interactive element activated by a user with a mouse, keyboard, finger, voice command, or other assistive technology. Once activated, it then performs a programmable action, such as submitting a form or opening a dialog. - MDN */
export function button(attrs: TagAttrs): TagElement;
/** The 'button' HTML element is an interactive element activated by a user with a mouse, keyboard, finger, voice command, or other assistive technology. Once activated, it then performs a programmable action, such as submitting a form or opening a dialog. - MDN */
export function button(data: TagData): TagElement;
/** The 'button' HTML element is an interactive element activated by a user with a mouse, keyboard, finger, voice command, or other assistive technology. Once activated, it then performs a programmable action, such as submitting a form or opening a dialog. - MDN */
export function button(attrs: TagAttrs, data: TagData): TagElement;
export function button(a?: any, b?: any): TagElement {
  return tag('button', a, b);
}

/** 	Use the HTML 'canvas' element with either the canvas scripting API or the WebGL API to draw graphics and animations. - MDN */
export function canvas(): TagElement;
/** 	Use the HTML 'canvas' element with either the canvas scripting API or the WebGL API to draw graphics and animations. - MDN */
export function canvas(attrs: TagAttrs): TagElement;
/** 	Use the HTML 'canvas' element with either the canvas scripting API or the WebGL API to draw graphics and animations. - MDN */
export function canvas(data: TagData): TagElement;
/** 	Use the HTML 'canvas' element with either the canvas scripting API or the WebGL API to draw graphics and animations. - MDN */
export function canvas(attrs: TagAttrs, data: TagData): TagElement;
export function canvas(a?: any, b?: any): TagElement {
  return tag('canvas', a, b);
}

/** The 'caption' HTML element specifies the caption (or title) of a table. - MDN */
export function caption(): TagElement;
/** The 'caption' HTML element specifies the caption (or title) of a table. - MDN */
export function caption(attrs: TagAttrs): TagElement;
/** The 'caption' HTML element specifies the caption (or title) of a table. - MDN */
export function caption(data: TagData): TagElement;
/** The 'caption' HTML element specifies the caption (or title) of a table. - MDN */
export function caption(attrs: TagAttrs, data: TagData): TagElement;
export function caption(a?: any, b?: any): TagElement {
  return tag('caption', a, b);
}

/** The 'cite' HTML element is used to describe a reference to a cited creative work, and must include the title of that work. The reference may be in an abbreviated form according to context-appropriate conventions related to citation metadata. - MDN */
export function cite(): TagElement;
/** The 'cite' HTML element is used to describe a reference to a cited creative work, and must include the title of that work. The reference may be in an abbreviated form according to context-appropriate conventions related to citation metadata. - MDN */
export function cite(attrs: TagAttrs): TagElement;
/** The 'cite' HTML element is used to describe a reference to a cited creative work, and must include the title of that work. The reference may be in an abbreviated form according to context-appropriate conventions related to citation metadata. - MDN */
export function cite(data: TagData): TagElement;
/** The 'cite' HTML element is used to describe a reference to a cited creative work, and must include the title of that work. The reference may be in an abbreviated form according to context-appropriate conventions related to citation metadata. - MDN */
export function cite(attrs: TagAttrs, data: TagData): TagElement;
export function cite(a?: any, b?: any): TagElement {
  return tag('cite', a, b);
}

/** The 'code' HTML element displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code. By default, the content text is displayed using the user agent default monospace font. - MDN */
export function code(): TagElement;
/** The 'code' HTML element displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code. By default, the content text is displayed using the user agent default monospace font. - MDN */
export function code(attrs: TagAttrs): TagElement;
/** The 'code' HTML element displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code. By default, the content text is displayed using the user agent default monospace font. - MDN */
export function code(data: TagData): TagElement;
/** The 'code' HTML element displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code. By default, the content text is displayed using the user agent default monospace font. - MDN */
export function code(attrs: TagAttrs, data: TagData): TagElement;
export function code(a?: any, b?: any): TagElement {
  return tag('code', a, b);
}

/** The 'col' HTML element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a colgroup element. - MDN */
export function col(): TagElement;
/** The 'col' HTML element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a colgroup element. - MDN */
export function col(attrs: TagAttrs): TagElement;
export function col(a?: any): TagElement {
  return tag('col', a);
}
/** The 'colgroup' HTML element defines a group of columns within a table. - MDN */
export function colgroup(): TagElement;
/** The 'colgroup' HTML element defines a group of columns within a table. - MDN */
export function colgroup(attrs: TagAttrs): TagElement;
/** The 'colgroup' HTML element defines a group of columns within a table. - MDN */
export function colgroup(data: TagData): TagElement;
/** The 'colgroup' HTML element defines a group of columns within a table. - MDN */
export function colgroup(attrs: TagAttrs, data: TagData): TagElement;
export function colgroup(a?: any, b?: any): TagElement {
  return tag('colgroup', a, b);
}

/** The 'data' HTML element links a given piece of content with a machine-readable translation. If the content is time- or date-related, the time element must be used. - MDN */
export function data(): TagElement;
/** The 'data' HTML element links a given piece of content with a machine-readable translation. If the content is time- or date-related, the time element must be used. - MDN */
export function data(attrs: TagAttrs): TagElement;
/** The 'data' HTML element links a given piece of content with a machine-readable translation. If the content is time- or date-related, the time element must be used. - MDN */
export function data(data: TagData): TagElement;
/** The 'data' HTML element links a given piece of content with a machine-readable translation. If the content is time- or date-related, the time element must be used. - MDN */
export function data(attrs: TagAttrs, data: TagData): TagElement;
export function data(a?: any, b?: any): TagElement {
  return tag('data', a, b);
}

/** The 'datalist' HTML element contains a set of option elements that represent the permissible or recommended options available to choose from within other controls. - MDN */
export function datalist(): TagElement;
/** The 'datalist' HTML element contains a set of option elements that represent the permissible or recommended options available to choose from within other controls. - MDN */
export function datalist(attrs: TagAttrs): TagElement;
/** The 'datalist' HTML element contains a set of option elements that represent the permissible or recommended options available to choose from within other controls. - MDN */
export function datalist(data: TagData): TagElement;
/** The 'datalist' HTML element contains a set of option elements that represent the permissible or recommended options available to choose from within other controls. - MDN */
export function datalist(attrs: TagAttrs, data: TagData): TagElement;
export function datalist(a?: any, b?: any): TagElement {
  return tag('datalist', a, b);
}

/** The 'dd' HTML element provides the description, definition, or value for the preceding term (dt) in a description list (dl). - MDN */
export function dd(): TagElement;
/** The 'dd' HTML element provides the description, definition, or value for the preceding term (dt) in a description list (dl). - MDN */
export function dd(attrs: TagAttrs): TagElement;
/** The 'dd' HTML element provides the description, definition, or value for the preceding term (dt) in a description list (dl). - MDN */
export function dd(data: TagData): TagElement;
/** The 'dd' HTML element provides the description, definition, or value for the preceding term (dt) in a description list (dl). - MDN */
export function dd(attrs: TagAttrs, data: TagData): TagElement;
export function dd(a?: any, b?: any): TagElement {
  return tag('dd', a, b);
}

/** The 'del' HTML element represents a range of text that has been deleted from a document. This can be used when rendering "track changes" or source code diff information, for example. The ins element can be used for the opposite purpose: to indicate text that has been added to the document. - MDN */
export function del(): TagElement;
/** The 'del' HTML element represents a range of text that has been deleted from a document. This can be used when rendering "track changes" or source code diff information, for example. The ins element can be used for the opposite purpose: to indicate text that has been added to the document. - MDN */
export function del(attrs: TagAttrs): TagElement;
/** The 'del' HTML element represents a range of text that has been deleted from a document. This can be used when rendering "track changes" or source code diff information, for example. The ins element can be used for the opposite purpose: to indicate text that has been added to the document. - MDN */
export function del(data: TagData): TagElement;
/** The 'del' HTML element represents a range of text that has been deleted from a document. This can be used when rendering "track changes" or source code diff information, for example. The ins element can be used for the opposite purpose: to indicate text that has been added to the document. - MDN */
export function del(attrs: TagAttrs, data: TagData): TagElement;
export function del(a?: any, b?: any): TagElement {
  return tag('del', a, b);
}

/** The 'details' HTML element creates a disclosure widget in which information is visible only when the widget is toggled into an "open" state. A summary or label must be provided using the summary element. - MDN */
export function details(): TagElement;
/** The 'details' HTML element creates a disclosure widget in which information is visible only when the widget is toggled into an "open" state. A summary or label must be provided using the summary element. - MDN */
export function details(attrs: TagAttrs): TagElement;
/** The 'details' HTML element creates a disclosure widget in which information is visible only when the widget is toggled into an "open" state. A summary or label must be provided using the summary element. - MDN */
export function details(data: TagData): TagElement;
/** The 'details' HTML element creates a disclosure widget in which information is visible only when the widget is toggled into an "open" state. A summary or label must be provided using the summary element. - MDN */
export function details(attrs: TagAttrs, data: TagData): TagElement;
export function details(a?: any, b?: any): TagElement {
  return tag('details', a, b);
}

/** The 'dfn' HTML element is used to indicate the term being defined within the context of a definition phrase or sentence. The p element, the dt/dd pairing, or the section element which is the nearest ancestor of the 'dfn' is considered to be the definition of the term. - MDN */
export function dfn(): TagElement;
/** The 'dfn' HTML element is used to indicate the term being defined within the context of a definition phrase or sentence. The p element, the dt/dd pairing, or the section element which is the nearest ancestor of the 'dfn' is considered to be the definition of the term. - MDN */
export function dfn(attrs: TagAttrs): TagElement;
/** The 'dfn' HTML element is used to indicate the term being defined within the context of a definition phrase or sentence. The p element, the dt/dd pairing, or the section element which is the nearest ancestor of the 'dfn' is considered to be the definition of the term. - MDN */
export function dfn(data: TagData): TagElement;
/** The 'dfn' HTML element is used to indicate the term being defined within the context of a definition phrase or sentence. The p element, the dt/dd pairing, or the section element which is the nearest ancestor of the 'dfn' is considered to be the definition of the term. - MDN */
export function dfn(attrs: TagAttrs, data: TagData): TagElement;
export function dfn(a?: any, b?: any): TagElement {
  return tag('dfn', a, b);
}

/** The 'dialog' HTML element represents a dialog box or other interactive component, such as a dismissible alert, inspector, or subwindow. - MDN */
export function dialog(): TagElement;
/** The 'dialog' HTML element represents a dialog box or other interactive component, such as a dismissible alert, inspector, or subwindow. - MDN */
export function dialog(attrs: TagAttrs): TagElement;
/** The 'dialog' HTML element represents a dialog box or other interactive component, such as a dismissible alert, inspector, or subwindow. - MDN */
export function dialog(data: TagData): TagElement;
/** The 'dialog' HTML element represents a dialog box or other interactive component, such as a dismissible alert, inspector, or subwindow. - MDN */
export function dialog(attrs: TagAttrs, data: TagData): TagElement;
export function dialog(a?: any, b?: any): TagElement {
  return tag('dialog', a, b);
}

/** The 'div' HTML element is the generic container for flow content. It has no effect on the content or layout until styled in some way using CSS (e.g. styling is directly applied to it, or some kind of layout model like Flexbox is applied to its parent element). - MDN */
export function div(): TagElement;
/** The 'div' HTML element is the generic container for flow content. It has no effect on the content or layout until styled in some way using CSS (e.g. styling is directly applied to it, or some kind of layout model like Flexbox is applied to its parent element). - MDN */
export function div(attrs: TagAttrs): TagElement;
/** The 'div' HTML element is the generic container for flow content. It has no effect on the content or layout until styled in some way using CSS (e.g. styling is directly applied to it, or some kind of layout model like Flexbox is applied to its parent element). - MDN */
export function div(data: TagData): TagElement;
/** The 'div' HTML element is the generic container for flow content. It has no effect on the content or layout until styled in some way using CSS (e.g. styling is directly applied to it, or some kind of layout model like Flexbox is applied to its parent element). - MDN */
export function div(attrs: TagAttrs, data: TagData): TagElement;
export function div(a?: any, b?: any): TagElement {
  return tag('div', a, b);
}

/** The 'dl' HTML element represents a description list. The element encloses a list of groups of terms (specified using the dt element) and descriptions (provided by dd elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs). - MDN */
export function dl(): TagElement;
/** The 'dl' HTML element represents a description list. The element encloses a list of groups of terms (specified using the dt element) and descriptions (provided by dd elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs). - MDN */
export function dl(attrs: TagAttrs): TagElement;
/** The 'dl' HTML element represents a description list. The element encloses a list of groups of terms (specified using the dt element) and descriptions (provided by dd elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs). - MDN */
export function dl(data: TagData): TagElement;
/** The 'dl' HTML element represents a description list. The element encloses a list of groups of terms (specified using the dt element) and descriptions (provided by dd elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs). - MDN */
export function dl(attrs: TagAttrs, data: TagData): TagElement;
export function dl(a?: any, b?: any): TagElement {
  return tag('dl', a, b);
}

/** The 'dt' HTML element specifies a term in a description or definition list, and as such must be used inside a dl element. It is usually followed by a dd element; however, multiple 'dt' elements in a row indicate several terms that are all defined by the immediate next dd element. - MDN */
export function dt(): TagElement;
/** The 'dt' HTML element specifies a term in a description or definition list, and as such must be used inside a dl element. It is usually followed by a dd element; however, multiple 'dt' elements in a row indicate several terms that are all defined by the immediate next dd element. - MDN */
export function dt(attrs: TagAttrs): TagElement;
/** The 'dt' HTML element specifies a term in a description or definition list, and as such must be used inside a dl element. It is usually followed by a dd element; however, multiple 'dt' elements in a row indicate several terms that are all defined by the immediate next dd element. - MDN */
export function dt(data: TagData): TagElement;
/** The 'dt' HTML element specifies a term in a description or definition list, and as such must be used inside a dl element. It is usually followed by a dd element; however, multiple 'dt' elements in a row indicate several terms that are all defined by the immediate next dd element. - MDN */
export function dt(attrs: TagAttrs, data: TagData): TagElement;
export function dt(a?: any, b?: any): TagElement {
  return tag('dt', a, b);
}

/** The 'em' HTML element marks text that has stress emphasis. The 'em' element can be nested, with each level of nesting indicating a greater degree of emphasis. - MDN */
export function em(): TagElement;
/** The 'em' HTML element marks text that has stress emphasis. The 'em' element can be nested, with each level of nesting indicating a greater degree of emphasis. - MDN */
export function em(attrs: TagAttrs): TagElement;
/** The 'em' HTML element marks text that has stress emphasis. The 'em' element can be nested, with each level of nesting indicating a greater degree of emphasis. - MDN */
export function em(data: TagData): TagElement;
/** The 'em' HTML element marks text that has stress emphasis. The 'em' element can be nested, with each level of nesting indicating a greater degree of emphasis. - MDN */
export function em(attrs: TagAttrs, data: TagData): TagElement;
export function em(a?: any, b?: any): TagElement {
  return tag('em', a, b);
}

/** The 'embed' HTML element embeds external content at the specified point in the document. This content is provided by an external application or other source of interactive content such as a browser plug-in. - MDN */
export function embed(): TagElement;
/** The 'embed' HTML element embeds external content at the specified point in the document. This content is provided by an external application or other source of interactive content such as a browser plug-in. - MDN */
export function embed(attrs: TagAttrs): TagElement;
export function embed(a?: any): TagElement {
  return tag('embed', a);
}
/** The 'fieldset' HTML element is used to group several controls as well as labels (label) within a web form. - MDN */
export function fieldset(): TagElement;
/** The 'fieldset' HTML element is used to group several controls as well as labels (label) within a web form. - MDN */
export function fieldset(attrs: TagAttrs): TagElement;
/** The 'fieldset' HTML element is used to group several controls as well as labels (label) within a web form. - MDN */
export function fieldset(data: TagData): TagElement;
/** The 'fieldset' HTML element is used to group several controls as well as labels (label) within a web form. - MDN */
export function fieldset(attrs: TagAttrs, data: TagData): TagElement;
export function fieldset(a?: any, b?: any): TagElement {
  return tag('fieldset', a, b);
}

/** The 'figcaption' HTML element represents a caption or legend describing the rest of the contents of its parent figure element. - MDN */
export function figcaption(): TagElement;
/** The 'figcaption' HTML element represents a caption or legend describing the rest of the contents of its parent figure element. - MDN */
export function figcaption(attrs: TagAttrs): TagElement;
/** The 'figcaption' HTML element represents a caption or legend describing the rest of the contents of its parent figure element. - MDN */
export function figcaption(data: TagData): TagElement;
/** The 'figcaption' HTML element represents a caption or legend describing the rest of the contents of its parent figure element. - MDN */
export function figcaption(attrs: TagAttrs, data: TagData): TagElement;
export function figcaption(a?: any, b?: any): TagElement {
  return tag('figcaption', a, b);
}

/** The 'figure' HTML element represents self-contained content, potentially with an optional caption, which is specified using the figcaption element. The figure, its caption, and its contents are referenced as a single unit. - MDN */
export function figure(): TagElement;
/** The 'figure' HTML element represents self-contained content, potentially with an optional caption, which is specified using the figcaption element. The figure, its caption, and its contents are referenced as a single unit. - MDN */
export function figure(attrs: TagAttrs): TagElement;
/** The 'figure' HTML element represents self-contained content, potentially with an optional caption, which is specified using the figcaption element. The figure, its caption, and its contents are referenced as a single unit. - MDN */
export function figure(data: TagData): TagElement;
/** The 'figure' HTML element represents self-contained content, potentially with an optional caption, which is specified using the figcaption element. The figure, its caption, and its contents are referenced as a single unit. - MDN */
export function figure(attrs: TagAttrs, data: TagData): TagElement;
export function figure(a?: any, b?: any): TagElement {
  return tag('figure', a, b);
}

/** 	The 'footer' HTML element represents a footer for its nearest ancestor sectioning content or sectioning root element. A 'footer' typically contains information about the author of the section, copyright data or links to related documents. - MDN */
export function footer(): TagElement;
/** 	The 'footer' HTML element represents a footer for its nearest ancestor sectioning content or sectioning root element. A 'footer' typically contains information about the author of the section, copyright data or links to related documents. - MDN */
export function footer(attrs: TagAttrs): TagElement;
/** 	The 'footer' HTML element represents a footer for its nearest ancestor sectioning content or sectioning root element. A 'footer' typically contains information about the author of the section, copyright data or links to related documents. - MDN */
export function footer(data: TagData): TagElement;
/** 	The 'footer' HTML element represents a footer for its nearest ancestor sectioning content or sectioning root element. A 'footer' typically contains information about the author of the section, copyright data or links to related documents. - MDN */
export function footer(attrs: TagAttrs, data: TagData): TagElement;
export function footer(a?: any, b?: any): TagElement {
  return tag('footer', a, b);
}

/** 	The 'form' HTML element represents a document section containing interactive controls for submitting information. - MDN */
export function form(): TagElement;
/** 	The 'form' HTML element represents a document section containing interactive controls for submitting information. - MDN */
export function form(attrs: TagAttrs): TagElement;
/** 	The 'form' HTML element represents a document section containing interactive controls for submitting information. - MDN */
export function form(data: TagData): TagElement;
/** 	The 'form' HTML element represents a document section containing interactive controls for submitting information. - MDN */
export function form(attrs: TagAttrs, data: TagData): TagElement;
export function form(a?: any, b?: any): TagElement {
  return tag('form', a, b);
}

/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h1(): TagElement;
/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h1(attrs: TagAttrs): TagElement;
/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h1(data: TagData): TagElement;
/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h1(attrs: TagAttrs, data: TagData): TagElement;
export function h1(a?: any, b?: any): TagElement {
  return tag('h1', a, b);
}

/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h2(): TagElement;
/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h2(attrs: TagAttrs): TagElement;
/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h2(data: TagData): TagElement;
/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h2(attrs: TagAttrs, data: TagData): TagElement;
export function h2(a?: any, b?: any): TagElement {
  return tag('h2', a, b);
}

/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h3(): TagElement;
/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h3(attrs: TagAttrs): TagElement;
/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h3(data: TagData): TagElement;
/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h3(attrs: TagAttrs, data: TagData): TagElement;
export function h3(a?: any, b?: any): TagElement {
  return tag('h3', a, b);
}

/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h4(): TagElement;
/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h4(attrs: TagAttrs): TagElement;
/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h4(data: TagData): TagElement;
/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h4(attrs: TagAttrs, data: TagData): TagElement;
export function h4(a?: any, b?: any): TagElement {
  return tag('h4', a, b);
}

/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h5(): TagElement;
/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h5(attrs: TagAttrs): TagElement;
/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h5(data: TagData): TagElement;
/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h5(attrs: TagAttrs, data: TagData): TagElement;
export function h5(a?: any, b?: any): TagElement {
  return tag('h5', a, b);
}

/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h6(): TagElement;
/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h6(attrs: TagAttrs): TagElement;
/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h6(data: TagData): TagElement;
/** The 'h1' to 'h6' HTML elements represent six levels of section headings. 'h1' is the highest section level and 'h6' is the lowest. - MDN */
export function h6(attrs: TagAttrs, data: TagData): TagElement;
export function h6(a?: any, b?: any): TagElement {
  return tag('h6', a, b);
}

/** The 'head' HTML element contains machine-readable information (metadata) about the document, like its title, scripts, and style sheets. - MDN */
export function head(): TagElement;
/** The 'head' HTML element contains machine-readable information (metadata) about the document, like its title, scripts, and style sheets. - MDN */
export function head(attrs: TagAttrs): TagElement;
/** The 'head' HTML element contains machine-readable information (metadata) about the document, like its title, scripts, and style sheets. - MDN */
export function head(data: TagData): TagElement;
/** The 'head' HTML element contains machine-readable information (metadata) about the document, like its title, scripts, and style sheets. - MDN */
export function head(attrs: TagAttrs, data: TagData): TagElement;
export function head(a?: any, b?: any): TagElement {
  return tag('head', a, b);
}

/** The 'header' HTML element represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also a logo, a search form, an author name, and other elements. - MDN */
export function header(): TagElement;
/** The 'header' HTML element represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also a logo, a search form, an author name, and other elements. - MDN */
export function header(attrs: TagAttrs): TagElement;
/** The 'header' HTML element represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also a logo, a search form, an author name, and other elements. - MDN */
export function header(data: TagData): TagElement;
/** The 'header' HTML element represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also a logo, a search form, an author name, and other elements. - MDN */
export function header(attrs: TagAttrs, data: TagData): TagElement;
export function header(a?: any, b?: any): TagElement {
  return tag('header', a, b);
}

/** The 'hgroup' HTML element represents a heading and related content. It groups a single 'h1–h6' element with one or more 'p'. - MDN */
export function hgroup(): TagElement;
/** The 'hgroup' HTML element represents a heading and related content. It groups a single 'h1–h6' element with one or more 'p'. - MDN */
export function hgroup(attrs: TagAttrs): TagElement;
/** The 'hgroup' HTML element represents a heading and related content. It groups a single 'h1–h6' element with one or more 'p'. - MDN */
export function hgroup(data: TagData): TagElement;
/** The 'hgroup' HTML element represents a heading and related content. It groups a single 'h1–h6' element with one or more 'p'. - MDN */
export function hgroup(attrs: TagAttrs, data: TagData): TagElement;
export function hgroup(a?: any, b?: any): TagElement {
  return tag('hgroup', a, b);
}

/** The 'hr' HTML element represents a thematic break between paragraph-level elements: for example, a change of scene in a story, or a shift of topic within a section. - MDN */
export function hr(): TagElement;
/** The 'hr' HTML element represents a thematic break between paragraph-level elements: for example, a change of scene in a story, or a shift of topic within a section. - MDN */
export function hr(attrs: TagAttrs): TagElement;
export function hr(a?: any): TagElement {
  return tag('hr', a);
}
/** The 'html' HTML element represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element. - MDN */
export function html(): TagElement;
/** The 'html' HTML element represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element. - MDN */
export function html(attrs: TagAttrs): TagElement;
/** The 'html' HTML element represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element. - MDN */
export function html(data: TagData): TagElement;
/** The 'html' HTML element represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element. - MDN */
export function html(attrs: TagAttrs, data: TagData): TagElement;
export function html(a?: any, b?: any): TagElement {
  return tag('html', a, b);
}

/** The 'i' HTML element represents a range of text that is set off from the normal text for some reason, such as idiomatic text, technical terms, taxonomical designations, among others. Historically, these have been presented using italicized type, which is the original source of the 'i' naming of this element. - MDN */
export function i(): TagElement;
/** The 'i' HTML element represents a range of text that is set off from the normal text for some reason, such as idiomatic text, technical terms, taxonomical designations, among others. Historically, these have been presented using italicized type, which is the original source of the 'i' naming of this element. - MDN */
export function i(attrs: TagAttrs): TagElement;
/** The 'i' HTML element represents a range of text that is set off from the normal text for some reason, such as idiomatic text, technical terms, taxonomical designations, among others. Historically, these have been presented using italicized type, which is the original source of the 'i' naming of this element. - MDN */
export function i(data: TagData): TagElement;
/** The 'i' HTML element represents a range of text that is set off from the normal text for some reason, such as idiomatic text, technical terms, taxonomical designations, among others. Historically, these have been presented using italicized type, which is the original source of the 'i' naming of this element. - MDN */
export function i(attrs: TagAttrs, data: TagData): TagElement;
export function i(a?: any, b?: any): TagElement {
  return tag('i', a, b);
}

/** The 'iframe' HTML element represents a nested browsing context, embedding another HTML page into the current one. - MDN */
export function iframe(): TagElement;
/** The 'iframe' HTML element represents a nested browsing context, embedding another HTML page into the current one. - MDN */
export function iframe(attrs: TagAttrs): TagElement;
/** The 'iframe' HTML element represents a nested browsing context, embedding another HTML page into the current one. - MDN */
export function iframe(data: TagData): TagElement;
/** The 'iframe' HTML element represents a nested browsing context, embedding another HTML page into the current one. - MDN */
export function iframe(attrs: TagAttrs, data: TagData): TagElement;
export function iframe(a?: any, b?: any): TagElement {
  return tag('iframe', a, b);
}

/** The 'img' HTML element embeds an image into the document. - MDN */
export function img(): TagElement;
/** The 'img' HTML element embeds an image into the document. - MDN */
export function img(attrs: TagAttrs): TagElement;
export function img(a?: any): TagElement {
  return tag('img', a);
}
/** The 'input' HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The 'input' element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes. - MDN */
export function input(): TagElement;
/** The 'input' HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The 'input' element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes. - MDN */
export function input(attrs: TagAttrs): TagElement;
export function input(a?: any): TagElement {
  return tag('input', a);
}
/** The 'ins' HTML element represents a range of text that has been added to a document. You can use the del element to similarly represent a range of text that has been deleted from the document. - MDN */
export function ins(): TagElement;
/** The 'ins' HTML element represents a range of text that has been added to a document. You can use the del element to similarly represent a range of text that has been deleted from the document. - MDN */
export function ins(attrs: TagAttrs): TagElement;
/** The 'ins' HTML element represents a range of text that has been added to a document. You can use the del element to similarly represent a range of text that has been deleted from the document. - MDN */
export function ins(data: TagData): TagElement;
/** The 'ins' HTML element represents a range of text that has been added to a document. You can use the del element to similarly represent a range of text that has been deleted from the document. - MDN */
export function ins(attrs: TagAttrs, data: TagData): TagElement;
export function ins(a?: any, b?: any): TagElement {
  return tag('ins', a, b);
}

/** The 'kbd' HTML element represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device. By convention, the user agent defaults to rendering the contents of a 'kbd' element using its default monospace font, although this is not mandated by the HTML standard. - MDN */
export function kbd(): TagElement;
/** The 'kbd' HTML element represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device. By convention, the user agent defaults to rendering the contents of a 'kbd' element using its default monospace font, although this is not mandated by the HTML standard. - MDN */
export function kbd(attrs: TagAttrs): TagElement;
/** The 'kbd' HTML element represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device. By convention, the user agent defaults to rendering the contents of a 'kbd' element using its default monospace font, although this is not mandated by the HTML standard. - MDN */
export function kbd(data: TagData): TagElement;
/** The 'kbd' HTML element represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device. By convention, the user agent defaults to rendering the contents of a 'kbd' element using its default monospace font, although this is not mandated by the HTML standard. - MDN */
export function kbd(attrs: TagAttrs, data: TagData): TagElement;
export function kbd(a?: any, b?: any): TagElement {
  return tag('kbd', a, b);
}

/** The 'label' HTML element represents a caption for an item in a user interface. - MDN */
export function label(): TagElement;
/** The 'label' HTML element represents a caption for an item in a user interface. - MDN */
export function label(attrs: TagAttrs): TagElement;
/** The 'label' HTML element represents a caption for an item in a user interface. - MDN */
export function label(data: TagData): TagElement;
/** The 'label' HTML element represents a caption for an item in a user interface. - MDN */
export function label(attrs: TagAttrs, data: TagData): TagElement;
export function label(a?: any, b?: any): TagElement {
  return tag('label', a, b);
}

/** The 'legend' HTML element represents a caption for the content of its parent fieldset. - MDN */
export function legend(): TagElement;
/** The 'legend' HTML element represents a caption for the content of its parent fieldset. - MDN */
export function legend(attrs: TagAttrs): TagElement;
/** The 'legend' HTML element represents a caption for the content of its parent fieldset. - MDN */
export function legend(data: TagData): TagElement;
/** The 'legend' HTML element represents a caption for the content of its parent fieldset. - MDN */
export function legend(attrs: TagAttrs, data: TagData): TagElement;
export function legend(a?: any, b?: any): TagElement {
  return tag('legend', a, b);
}

/** The 'li' HTML element is used to represent an item in a list. It must be contained in a parent element: an ordered list (ol), an unordered list (ul), or a menu (menu). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter. - MDN */
export function li(): TagElement;
/** The 'li' HTML element is used to represent an item in a list. It must be contained in a parent element: an ordered list (ol), an unordered list (ul), or a menu (menu). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter. - MDN */
export function li(attrs: TagAttrs): TagElement;
/** The 'li' HTML element is used to represent an item in a list. It must be contained in a parent element: an ordered list (ol), an unordered list (ul), or a menu (menu). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter. - MDN */
export function li(data: TagData): TagElement;
/** The 'li' HTML element is used to represent an item in a list. It must be contained in a parent element: an ordered list (ol), an unordered list (ul), or a menu (menu). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter. - MDN */
export function li(attrs: TagAttrs, data: TagData): TagElement;
export function li(a?: any, b?: any): TagElement {
  return tag('li', a, b);
}

/** The 'link' HTML element specifies relationships between the current document and an external resource. This element is most commonly used to link to CSS, but is also used to establish site icons (both "favicon" style icons and icons for the home screen and apps on mobile devices) among other things. - MDN */
export function link(): TagElement;
/** The 'link' HTML element specifies relationships between the current document and an external resource. This element is most commonly used to link to CSS, but is also used to establish site icons (both "favicon" style icons and icons for the home screen and apps on mobile devices) among other things. - MDN */
export function link(attrs: TagAttrs): TagElement;
export function link(a?: any): TagElement {
  return tag('link', a);
}
/** The 'main' HTML element represents the dominant content of the body of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application. - MDN */
export function main(): TagElement;
/** The 'main' HTML element represents the dominant content of the body of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application. - MDN */
export function main(attrs: TagAttrs): TagElement;
/** The 'main' HTML element represents the dominant content of the body of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application. - MDN */
export function main(data: TagData): TagElement;
/** The 'main' HTML element represents the dominant content of the body of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application. - MDN */
export function main(attrs: TagAttrs, data: TagData): TagElement;
export function main(a?: any, b?: any): TagElement {
  return tag('main', a, b);
}

/** The 'map' HTML element is used with area elements to define an image map (a clickable link area). - MDN */
export function map(): TagElement;
/** The 'map' HTML element is used with area elements to define an image map (a clickable link area). - MDN */
export function map(attrs: TagAttrs): TagElement;
/** The 'map' HTML element is used with area elements to define an image map (a clickable link area). - MDN */
export function map(data: TagData): TagElement;
/** The 'map' HTML element is used with area elements to define an image map (a clickable link area). - MDN */
export function map(attrs: TagAttrs, data: TagData): TagElement;
export function map(a?: any, b?: any): TagElement {
  return tag('map', a, b);
}

/** The 'mark' HTML element represents text which is marked or highlighted for reference or notation purposes due to the marked passage's relevance in the enclosing context. - MDN */
export function mark(): TagElement;
/** The 'mark' HTML element represents text which is marked or highlighted for reference or notation purposes due to the marked passage's relevance in the enclosing context. - MDN */
export function mark(attrs: TagAttrs): TagElement;
/** The 'mark' HTML element represents text which is marked or highlighted for reference or notation purposes due to the marked passage's relevance in the enclosing context. - MDN */
export function mark(data: TagData): TagElement;
/** The 'mark' HTML element represents text which is marked or highlighted for reference or notation purposes due to the marked passage's relevance in the enclosing context. - MDN */
export function mark(attrs: TagAttrs, data: TagData): TagElement;
export function mark(a?: any, b?: any): TagElement {
  return tag('mark', a, b);
}

/** The top-level element in MathML is 'math'. Every valid MathML instance must be wrapped in 'math' tags. In addition you must not nest a second 'math' element in another, but you can have an arbitrary number of other child elements in it. - MDN */
export function math(): TagElement;
/** The top-level element in MathML is 'math'. Every valid MathML instance must be wrapped in 'math' tags. In addition you must not nest a second 'math' element in another, but you can have an arbitrary number of other child elements in it. - MDN */
export function math(attrs: TagAttrs): TagElement;
/** The top-level element in MathML is 'math'. Every valid MathML instance must be wrapped in 'math' tags. In addition you must not nest a second 'math' element in another, but you can have an arbitrary number of other child elements in it. - MDN */
export function math(data: TagData): TagElement;
/** The top-level element in MathML is 'math'. Every valid MathML instance must be wrapped in 'math' tags. In addition you must not nest a second 'math' element in another, but you can have an arbitrary number of other child elements in it. - MDN */
export function math(attrs: TagAttrs, data: TagData): TagElement;
export function math(a?: any, b?: any): TagElement {
  return tag('math', a, b);
}

/** The 'menu' HTML element is described in the HTML specification as a semantic alternative to ul, but treated by browsers (and exposed through the accessibility tree) as no different than ul. It represents an unordered list of items (which are represented by li elements). - MDN */
export function menu(): TagElement;
/** The 'menu' HTML element is described in the HTML specification as a semantic alternative to ul, but treated by browsers (and exposed through the accessibility tree) as no different than ul. It represents an unordered list of items (which are represented by li elements). - MDN */
export function menu(attrs: TagAttrs): TagElement;
/** The 'menu' HTML element is described in the HTML specification as a semantic alternative to ul, but treated by browsers (and exposed through the accessibility tree) as no different than ul. It represents an unordered list of items (which are represented by li elements). - MDN */
export function menu(data: TagData): TagElement;
/** The 'menu' HTML element is described in the HTML specification as a semantic alternative to ul, but treated by browsers (and exposed through the accessibility tree) as no different than ul. It represents an unordered list of items (which are represented by li elements). - MDN */
export function menu(attrs: TagAttrs, data: TagData): TagElement;
export function menu(a?: any, b?: any): TagElement {
  return tag('menu', a, b);
}

/** The 'meta' HTML element represents Metadata that cannot be represented by other HTML meta-related elements, like base, link, script, style or title. - MDN */
export function meta(): TagElement;
/** The 'meta' HTML element represents Metadata that cannot be represented by other HTML meta-related elements, like base, link, script, style or title. - MDN */
export function meta(attrs: TagAttrs): TagElement;
export function meta(a?: any): TagElement {
  return tag('meta', a);
}
/** The 'meter' HTML element represents either a scalar value within a known range or a fractional value. - MDN */
export function meter(): TagElement;
/** The 'meter' HTML element represents either a scalar value within a known range or a fractional value. - MDN */
export function meter(attrs: TagAttrs): TagElement;
/** The 'meter' HTML element represents either a scalar value within a known range or a fractional value. - MDN */
export function meter(data: TagData): TagElement;
/** The 'meter' HTML element represents either a scalar value within a known range or a fractional value. - MDN */
export function meter(attrs: TagAttrs, data: TagData): TagElement;
export function meter(a?: any, b?: any): TagElement {
  return tag('meter', a, b);
}

/** The 'nav' HTML element represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes. - MDN */
export function nav(): TagElement;
/** The 'nav' HTML element represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes. - MDN */
export function nav(attrs: TagAttrs): TagElement;
/** The 'nav' HTML element represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes. - MDN */
export function nav(data: TagData): TagElement;
/** The 'nav' HTML element represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes. - MDN */
export function nav(attrs: TagAttrs, data: TagData): TagElement;
export function nav(a?: any, b?: any): TagElement {
  return tag('nav', a, b);
}

/** The 'noscript' HTML element defines a section of HTML to be inserted if a script type on the page is unsupported or if scripting is currently turned off in the browser. - MDN */
export function noscript(): TagElement;
/** The 'noscript' HTML element defines a section of HTML to be inserted if a script type on the page is unsupported or if scripting is currently turned off in the browser. - MDN */
export function noscript(attrs: TagAttrs): TagElement;
/** The 'noscript' HTML element defines a section of HTML to be inserted if a script type on the page is unsupported or if scripting is currently turned off in the browser. - MDN */
export function noscript(data: TagData): TagElement;
/** The 'noscript' HTML element defines a section of HTML to be inserted if a script type on the page is unsupported or if scripting is currently turned off in the browser. - MDN */
export function noscript(attrs: TagAttrs, data: TagData): TagElement;
export function noscript(a?: any, b?: any): TagElement {
  return tag('noscript', a, b);
}

/** The 'object' HTML element represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin. - MDN */
export function _object(): TagElement;
/** The 'object' HTML element represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin. - MDN */
export function _object(attrs: TagAttrs): TagElement;
/** The 'object' HTML element represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin. - MDN */
export function _object(data: TagData): TagElement;
/** The 'object' HTML element represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin. - MDN */
export function _object(attrs: TagAttrs, data: TagData): TagElement;
export function _object(a?: any, b?: any): TagElement {
  return tag('_object', a, b);
}

/** The 'ol' HTML element represents an ordered list of items — typically rendered as a numbered list. - MDN */
export function ol(): TagElement;
/** The 'ol' HTML element represents an ordered list of items — typically rendered as a numbered list. - MDN */
export function ol(attrs: TagAttrs): TagElement;
/** The 'ol' HTML element represents an ordered list of items — typically rendered as a numbered list. - MDN */
export function ol(data: TagData): TagElement;
/** The 'ol' HTML element represents an ordered list of items — typically rendered as a numbered list. - MDN */
export function ol(attrs: TagAttrs, data: TagData): TagElement;
export function ol(a?: any, b?: any): TagElement {
  return tag('ol', a, b);
}

/** The 'optgroup' HTML element creates a grouping of options within a select element. - MDN */
export function optgroup(): TagElement;
/** The 'optgroup' HTML element creates a grouping of options within a select element. - MDN */
export function optgroup(attrs: TagAttrs): TagElement;
/** The 'optgroup' HTML element creates a grouping of options within a select element. - MDN */
export function optgroup(data: TagData): TagElement;
/** The 'optgroup' HTML element creates a grouping of options within a select element. - MDN */
export function optgroup(attrs: TagAttrs, data: TagData): TagElement;
export function optgroup(a?: any, b?: any): TagElement {
  return tag('optgroup', a, b);
}

/** The 'option' HTML element is used to define an item contained in a select, an optgroup, or a datalist element. As such, 'option' can represent menu items in popups and other lists of items in an HTML document. - MDN */
export function option(): TagElement;
/** The 'option' HTML element is used to define an item contained in a select, an optgroup, or a datalist element. As such, 'option' can represent menu items in popups and other lists of items in an HTML document. - MDN */
export function option(attrs: TagAttrs): TagElement;
/** The 'option' HTML element is used to define an item contained in a select, an optgroup, or a datalist element. As such, 'option' can represent menu items in popups and other lists of items in an HTML document. - MDN */
export function option(data: TagData): TagElement;
/** The 'option' HTML element is used to define an item contained in a select, an optgroup, or a datalist element. As such, 'option' can represent menu items in popups and other lists of items in an HTML document. - MDN */
export function option(attrs: TagAttrs, data: TagData): TagElement;
export function option(a?: any, b?: any): TagElement {
  return tag('option', a, b);
}

/** The 'output' HTML element is a container element into which a site or app can inject the results of a calculation or the outcome of a user action. - MDN */
export function output(): TagElement;
/** The 'output' HTML element is a container element into which a site or app can inject the results of a calculation or the outcome of a user action. - MDN */
export function output(attrs: TagAttrs): TagElement;
/** The 'output' HTML element is a container element into which a site or app can inject the results of a calculation or the outcome of a user action. - MDN */
export function output(data: TagData): TagElement;
/** The 'output' HTML element is a container element into which a site or app can inject the results of a calculation or the outcome of a user action. - MDN */
export function output(attrs: TagAttrs, data: TagData): TagElement;
export function output(a?: any, b?: any): TagElement {
  return tag('output', a, b);
}

/** The 'p' HTML element represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields. - MDN */
export function p(): TagElement;
/** The 'p' HTML element represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields. - MDN */
export function p(attrs: TagAttrs): TagElement;
/** The 'p' HTML element represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields. - MDN */
export function p(data: TagData): TagElement;
/** The 'p' HTML element represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields. - MDN */
export function p(attrs: TagAttrs, data: TagData): TagElement;
export function p(a?: any, b?: any): TagElement {
  return tag('p', a, b);
}

/** The 'param' HTML element defines parameters for an object element. - MDN */
export function param(): TagElement;
/** The 'param' HTML element defines parameters for an object element. - MDN */
export function param(attrs: TagAttrs): TagElement;
export function param(a?: any): TagElement {
  return tag('param', a);
}
/** The 'picture' HTML element contains zero or more source elements and one img element to offer alternative versions of an image for different display/device scenarios. - MDN */
export function picture(): TagElement;
/** The 'picture' HTML element contains zero or more source elements and one img element to offer alternative versions of an image for different display/device scenarios. - MDN */
export function picture(attrs: TagAttrs): TagElement;
/** The 'picture' HTML element contains zero or more source elements and one img element to offer alternative versions of an image for different display/device scenarios. - MDN */
export function picture(data: TagData): TagElement;
/** The 'picture' HTML element contains zero or more source elements and one img element to offer alternative versions of an image for different display/device scenarios. - MDN */
export function picture(attrs: TagAttrs, data: TagData): TagElement;
export function picture(a?: any, b?: any): TagElement {
  return tag('picture', a, b);
}

/** The 'pre' HTML element represents preformatted text which is to be presented exactly as written in the HTML file. The text is typically rendered using a non-proportional, or monospaced, font. Whitespace inside this element is displayed as written. - MDN */
export function pre(): TagElement;
/** The 'pre' HTML element represents preformatted text which is to be presented exactly as written in the HTML file. The text is typically rendered using a non-proportional, or monospaced, font. Whitespace inside this element is displayed as written. - MDN */
export function pre(attrs: TagAttrs): TagElement;
/** The 'pre' HTML element represents preformatted text which is to be presented exactly as written in the HTML file. The text is typically rendered using a non-proportional, or monospaced, font. Whitespace inside this element is displayed as written. - MDN */
export function pre(data: TagData): TagElement;
/** The 'pre' HTML element represents preformatted text which is to be presented exactly as written in the HTML file. The text is typically rendered using a non-proportional, or monospaced, font. Whitespace inside this element is displayed as written. - MDN */
export function pre(attrs: TagAttrs, data: TagData): TagElement;
export function pre(a?: any, b?: any): TagElement {
  return tag('pre', a, b);
}

/** The 'progress' HTML element displays an indicator showing the completion progress of a task, typically displayed as a progress bar. - MDN */
export function progress(): TagElement;
/** The 'progress' HTML element displays an indicator showing the completion progress of a task, typically displayed as a progress bar. - MDN */
export function progress(attrs: TagAttrs): TagElement;
/** The 'progress' HTML element displays an indicator showing the completion progress of a task, typically displayed as a progress bar. - MDN */
export function progress(data: TagData): TagElement;
/** The 'progress' HTML element displays an indicator showing the completion progress of a task, typically displayed as a progress bar. - MDN */
export function progress(attrs: TagAttrs, data: TagData): TagElement;
export function progress(a?: any, b?: any): TagElement {
  return tag('progress', a, b);
}

/** The 'q' HTML element indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks. This element is intended for short quotations that don't require paragraph breaks; for long quotations use the blockquote element. - MDN */
export function q(): TagElement;
/** The 'q' HTML element indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks. This element is intended for short quotations that don't require paragraph breaks; for long quotations use the blockquote element. - MDN */
export function q(attrs: TagAttrs): TagElement;
/** The 'q' HTML element indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks. This element is intended for short quotations that don't require paragraph breaks; for long quotations use the blockquote element. - MDN */
export function q(data: TagData): TagElement;
/** The 'q' HTML element indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks. This element is intended for short quotations that don't require paragraph breaks; for long quotations use the blockquote element. - MDN */
export function q(attrs: TagAttrs, data: TagData): TagElement;
export function q(a?: any, b?: any): TagElement {
  return tag('q', a, b);
}

/** The 'rb' HTML element is used to delimit the base text component of a ruby annotation, i.e. the text that is being annotated. One 'rb' element should wrap each separate atomic segment of the base text. - MDN */
export function rb(): TagElement;
/** The 'rb' HTML element is used to delimit the base text component of a ruby annotation, i.e. the text that is being annotated. One 'rb' element should wrap each separate atomic segment of the base text. - MDN */
export function rb(attrs: TagAttrs): TagElement;
/** The 'rb' HTML element is used to delimit the base text component of a ruby annotation, i.e. the text that is being annotated. One 'rb' element should wrap each separate atomic segment of the base text. - MDN */
export function rb(data: TagData): TagElement;
/** The 'rb' HTML element is used to delimit the base text component of a ruby annotation, i.e. the text that is being annotated. One 'rb' element should wrap each separate atomic segment of the base text. - MDN */
export function rb(attrs: TagAttrs, data: TagData): TagElement;
export function rb(a?: any, b?: any): TagElement {
  return tag('rb', a, b);
}

/** The 'rp' HTML element is used to provide fall-back parentheses for browsers that do not support display of ruby annotations using the ruby element. One 'rp' element should enclose each of the opening and closing parentheses that wrap the rt element that contains the annotation's text. - MDN */
export function rp(): TagElement;
/** The 'rp' HTML element is used to provide fall-back parentheses for browsers that do not support display of ruby annotations using the ruby element. One 'rp' element should enclose each of the opening and closing parentheses that wrap the rt element that contains the annotation's text. - MDN */
export function rp(attrs: TagAttrs): TagElement;
/** The 'rp' HTML element is used to provide fall-back parentheses for browsers that do not support display of ruby annotations using the ruby element. One 'rp' element should enclose each of the opening and closing parentheses that wrap the rt element that contains the annotation's text. - MDN */
export function rp(data: TagData): TagElement;
/** The 'rp' HTML element is used to provide fall-back parentheses for browsers that do not support display of ruby annotations using the ruby element. One 'rp' element should enclose each of the opening and closing parentheses that wrap the rt element that contains the annotation's text. - MDN */
export function rp(attrs: TagAttrs, data: TagData): TagElement;
export function rp(a?: any, b?: any): TagElement {
  return tag('rp', a, b);
}

/** The 'rt' HTML element specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The 'rt' element must always be contained within a ruby element. - MDN */
export function rt(): TagElement;
/** The 'rt' HTML element specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The 'rt' element must always be contained within a ruby element. - MDN */
export function rt(attrs: TagAttrs): TagElement;
/** The 'rt' HTML element specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The 'rt' element must always be contained within a ruby element. - MDN */
export function rt(data: TagData): TagElement;
/** The 'rt' HTML element specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The 'rt' element must always be contained within a ruby element. - MDN */
export function rt(attrs: TagAttrs, data: TagData): TagElement;
export function rt(a?: any, b?: any): TagElement {
  return tag('rt', a, b);
}

/** The 'rtc' HTML element embraces semantic annotations of characters presented in a ruby of rb elements used inside of ruby element. rb elements can have both pronunciation (rt) and semantic (rtc) annotations. - MDN */
export function rtc(): TagElement;
/** The 'rtc' HTML element embraces semantic annotations of characters presented in a ruby of rb elements used inside of ruby element. rb elements can have both pronunciation (rt) and semantic (rtc) annotations. - MDN */
export function rtc(attrs: TagAttrs): TagElement;
/** The 'rtc' HTML element embraces semantic annotations of characters presented in a ruby of rb elements used inside of ruby element. rb elements can have both pronunciation (rt) and semantic (rtc) annotations. - MDN */
export function rtc(data: TagData): TagElement;
/** The 'rtc' HTML element embraces semantic annotations of characters presented in a ruby of rb elements used inside of ruby element. rb elements can have both pronunciation (rt) and semantic (rtc) annotations. - MDN */
export function rtc(attrs: TagAttrs, data: TagData): TagElement;
export function rtc(a?: any, b?: any): TagElement {
  return tag('rtc', a, b);
}

/** 	The 'ruby' HTML element represents small annotations that are rendered above, below, or next to base text, usually used for showing the pronunciation of East Asian characters. It can also be used for annotating other kinds of text, but this usage is less common. - MDN */
export function ruby(): TagElement;
/** 	The 'ruby' HTML element represents small annotations that are rendered above, below, or next to base text, usually used for showing the pronunciation of East Asian characters. It can also be used for annotating other kinds of text, but this usage is less common. - MDN */
export function ruby(attrs: TagAttrs): TagElement;
/** 	The 'ruby' HTML element represents small annotations that are rendered above, below, or next to base text, usually used for showing the pronunciation of East Asian characters. It can also be used for annotating other kinds of text, but this usage is less common. - MDN */
export function ruby(data: TagData): TagElement;
/** 	The 'ruby' HTML element represents small annotations that are rendered above, below, or next to base text, usually used for showing the pronunciation of East Asian characters. It can also be used for annotating other kinds of text, but this usage is less common. - MDN */
export function ruby(attrs: TagAttrs, data: TagData): TagElement;
export function ruby(a?: any, b?: any): TagElement {
  return tag('ruby', a, b);
}

/** The 's' HTML element renders text with a strikethrough, or a line through it. Use the 's' element to represent things that are no longer relevant or no longer accurate. However, 's' is not appropriate when indicating document edits; for that, use the del and ins elements, as appropriate. - MDN */
export function s(): TagElement;
/** The 's' HTML element renders text with a strikethrough, or a line through it. Use the 's' element to represent things that are no longer relevant or no longer accurate. However, 's' is not appropriate when indicating document edits; for that, use the del and ins elements, as appropriate. - MDN */
export function s(attrs: TagAttrs): TagElement;
/** The 's' HTML element renders text with a strikethrough, or a line through it. Use the 's' element to represent things that are no longer relevant or no longer accurate. However, 's' is not appropriate when indicating document edits; for that, use the del and ins elements, as appropriate. - MDN */
export function s(data: TagData): TagElement;
/** The 's' HTML element renders text with a strikethrough, or a line through it. Use the 's' element to represent things that are no longer relevant or no longer accurate. However, 's' is not appropriate when indicating document edits; for that, use the del and ins elements, as appropriate. - MDN */
export function s(attrs: TagAttrs, data: TagData): TagElement;
export function s(a?: any, b?: any): TagElement {
  return tag('s', a, b);
}

/** The 'samp' HTML element is used to enclose inline text which represents sample (or quoted) output from a computer program. Its contents are typically rendered using the browser's default monospaced font (such as Courier or Lucida Console). - MDN */
export function samp(): TagElement;
/** The 'samp' HTML element is used to enclose inline text which represents sample (or quoted) output from a computer program. Its contents are typically rendered using the browser's default monospaced font (such as Courier or Lucida Console). - MDN */
export function samp(attrs: TagAttrs): TagElement;
/** The 'samp' HTML element is used to enclose inline text which represents sample (or quoted) output from a computer program. Its contents are typically rendered using the browser's default monospaced font (such as Courier or Lucida Console). - MDN */
export function samp(data: TagData): TagElement;
/** The 'samp' HTML element is used to enclose inline text which represents sample (or quoted) output from a computer program. Its contents are typically rendered using the browser's default monospaced font (such as Courier or Lucida Console). - MDN */
export function samp(attrs: TagAttrs, data: TagData): TagElement;
export function samp(a?: any, b?: any): TagElement {
  return tag('samp', a, b);
}

/** The 'script' HTML element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code. The 'script' element can also be used with other languages, such as WebGL's GLSL shader programming language and JSON. - MDN */
export function script(): TagElement;
/** The 'script' HTML element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code. The 'script' element can also be used with other languages, such as WebGL's GLSL shader programming language and JSON. - MDN */
export function script(attrs: TagAttrs): TagElement;
/** The 'script' HTML element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code. The 'script' element can also be used with other languages, such as WebGL's GLSL shader programming language and JSON. - MDN */
export function script(data: TagData): TagElement;
/** The 'script' HTML element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code. The 'script' element can also be used with other languages, such as WebGL's GLSL shader programming language and JSON. - MDN */
export function script(attrs: TagAttrs, data: TagData): TagElement;
export function script(a?: any, b?: any): TagElement {
  return tag('script', a, b);
}

/** The 'section' HTML element represents a generic standalone section of a document, which doesn't have a more specific semantic element to represent it. Sections should always have a heading, with very few exceptions. - MDN */
export function section(): TagElement;
/** The 'section' HTML element represents a generic standalone section of a document, which doesn't have a more specific semantic element to represent it. Sections should always have a heading, with very few exceptions. - MDN */
export function section(attrs: TagAttrs): TagElement;
/** The 'section' HTML element represents a generic standalone section of a document, which doesn't have a more specific semantic element to represent it. Sections should always have a heading, with very few exceptions. - MDN */
export function section(data: TagData): TagElement;
/** The 'section' HTML element represents a generic standalone section of a document, which doesn't have a more specific semantic element to represent it. Sections should always have a heading, with very few exceptions. - MDN */
export function section(attrs: TagAttrs, data: TagData): TagElement;
export function section(a?: any, b?: any): TagElement {
  return tag('section', a, b);
}

/** The 'select' HTML element represents a control that provides a menu of options. - MDN */
export function select(): TagElement;
/** The 'select' HTML element represents a control that provides a menu of options. - MDN */
export function select(attrs: TagAttrs): TagElement;
/** The 'select' HTML element represents a control that provides a menu of options. - MDN */
export function select(data: TagData): TagElement;
/** The 'select' HTML element represents a control that provides a menu of options. - MDN */
export function select(attrs: TagAttrs, data: TagData): TagElement;
export function select(a?: any, b?: any): TagElement {
  return tag('select', a, b);
}

/** The 'slot' HTML element—part of the Web Components technology suite—is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together. - MDN */
export function slot(): TagElement;
/** The 'slot' HTML element—part of the Web Components technology suite—is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together. - MDN */
export function slot(attrs: TagAttrs): TagElement;
/** The 'slot' HTML element—part of the Web Components technology suite—is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together. - MDN */
export function slot(data: TagData): TagElement;
/** The 'slot' HTML element—part of the Web Components technology suite—is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together. - MDN */
export function slot(attrs: TagAttrs, data: TagData): TagElement;
export function slot(a?: any, b?: any): TagElement {
  return tag('slot', a, b);
}

/** The 'small' HTML element represents side-comments and small print, like copyright and legal text, independent of its styled presentation. By default, it renders text within it one font-size smaller, such as from small to x-small. - MDN */
export function small(): TagElement;
/** The 'small' HTML element represents side-comments and small print, like copyright and legal text, independent of its styled presentation. By default, it renders text within it one font-size smaller, such as from small to x-small. - MDN */
export function small(attrs: TagAttrs): TagElement;
/** The 'small' HTML element represents side-comments and small print, like copyright and legal text, independent of its styled presentation. By default, it renders text within it one font-size smaller, such as from small to x-small. - MDN */
export function small(data: TagData): TagElement;
/** The 'small' HTML element represents side-comments and small print, like copyright and legal text, independent of its styled presentation. By default, it renders text within it one font-size smaller, such as from small to x-small. - MDN */
export function small(attrs: TagAttrs, data: TagData): TagElement;
export function small(a?: any, b?: any): TagElement {
  return tag('small', a, b);
}

/** The 'source' HTML element specifies multiple media resources for the picture, the audio element, or the video element. It is a void element, meaning that it has no content and does not have a closing tag. It is commonly used to offer the same media content in multiple file formats in order to provide compatibility with a broad range of browsers given their differing support for image file formats and media file formats. - MDN */
export function source(): TagElement;
/** The 'source' HTML element specifies multiple media resources for the picture, the audio element, or the video element. It is a void element, meaning that it has no content and does not have a closing tag. It is commonly used to offer the same media content in multiple file formats in order to provide compatibility with a broad range of browsers given their differing support for image file formats and media file formats. - MDN */
export function source(attrs: TagAttrs): TagElement;
export function source(a?: any): TagElement {
  return tag('source', a);
}
/** The 'span' HTML element is a generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the class or id attributes), or because they share attribute values, such as lang. It should be used only when no other semantic element is appropriate. 'span' is very much like a div element, but div is a block-level element whereas a 'span' is an inline element. - MDN */
export function span(): TagElement;
/** The 'span' HTML element is a generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the class or id attributes), or because they share attribute values, such as lang. It should be used only when no other semantic element is appropriate. 'span' is very much like a div element, but div is a block-level element whereas a 'span' is an inline element. - MDN */
export function span(attrs: TagAttrs): TagElement;
/** The 'span' HTML element is a generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the class or id attributes), or because they share attribute values, such as lang. It should be used only when no other semantic element is appropriate. 'span' is very much like a div element, but div is a block-level element whereas a 'span' is an inline element. - MDN */
export function span(data: TagData): TagElement;
/** The 'span' HTML element is a generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the class or id attributes), or because they share attribute values, such as lang. It should be used only when no other semantic element is appropriate. 'span' is very much like a div element, but div is a block-level element whereas a 'span' is an inline element. - MDN */
export function span(attrs: TagAttrs, data: TagData): TagElement;
export function span(a?: any, b?: any): TagElement {
  return tag('span', a, b);
}

/** The 'strong' HTML element indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type. - MDN */
export function strong(): TagElement;
/** The 'strong' HTML element indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type. - MDN */
export function strong(attrs: TagAttrs): TagElement;
/** The 'strong' HTML element indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type. - MDN */
export function strong(data: TagData): TagElement;
/** The 'strong' HTML element indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type. - MDN */
export function strong(attrs: TagAttrs, data: TagData): TagElement;
export function strong(a?: any, b?: any): TagElement {
  return tag('strong', a, b);
}

/** The 'style' HTML element contains style information for a document, or part of a document. It contains CSS, which is applied to the contents of the document containing the 'style' element. - MDN */
export function style(): TagElement;
/** The 'style' HTML element contains style information for a document, or part of a document. It contains CSS, which is applied to the contents of the document containing the 'style' element. - MDN */
export function style(attrs: TagAttrs): TagElement;
/** The 'style' HTML element contains style information for a document, or part of a document. It contains CSS, which is applied to the contents of the document containing the 'style' element. - MDN */
export function style(data: TagData): TagElement;
/** The 'style' HTML element contains style information for a document, or part of a document. It contains CSS, which is applied to the contents of the document containing the 'style' element. - MDN */
export function style(attrs: TagAttrs, data: TagData): TagElement;
export function style(a?: any, b?: any): TagElement {
  return tag('style', a, b);
}

/** The 'sub' HTML element specifies inline text which should be displayed as subscript for solely typographical reasons. Subscripts are typically rendered with a lowered baseline using smaller text. - MDN */
export function sub(): TagElement;
/** The 'sub' HTML element specifies inline text which should be displayed as subscript for solely typographical reasons. Subscripts are typically rendered with a lowered baseline using smaller text. - MDN */
export function sub(attrs: TagAttrs): TagElement;
/** The 'sub' HTML element specifies inline text which should be displayed as subscript for solely typographical reasons. Subscripts are typically rendered with a lowered baseline using smaller text. - MDN */
export function sub(data: TagData): TagElement;
/** The 'sub' HTML element specifies inline text which should be displayed as subscript for solely typographical reasons. Subscripts are typically rendered with a lowered baseline using smaller text. - MDN */
export function sub(attrs: TagAttrs, data: TagData): TagElement;
export function sub(a?: any, b?: any): TagElement {
  return tag('sub', a, b);
}

/** The 'summary' HTML element specifies a summary, caption, or legend for a details element's disclosure box. Clicking the 'summary' element toggles the state of the parent 'details' element open and closed. - MDN */
export function summary(): TagElement;
/** The 'summary' HTML element specifies a summary, caption, or legend for a details element's disclosure box. Clicking the 'summary' element toggles the state of the parent 'details' element open and closed. - MDN */
export function summary(attrs: TagAttrs): TagElement;
/** The 'summary' HTML element specifies a summary, caption, or legend for a details element's disclosure box. Clicking the 'summary' element toggles the state of the parent 'details' element open and closed. - MDN */
export function summary(data: TagData): TagElement;
/** The 'summary' HTML element specifies a summary, caption, or legend for a details element's disclosure box. Clicking the 'summary' element toggles the state of the parent 'details' element open and closed. - MDN */
export function summary(attrs: TagAttrs, data: TagData): TagElement;
export function summary(a?: any, b?: any): TagElement {
  return tag('summary', a, b);
}

/** The 'sup' HTML element specifies inline text which is to be displayed as superscript for solely typographical reasons. Superscripts are usually rendered with a raised baseline using smaller text. - MDN */
export function sup(): TagElement;
/** The 'sup' HTML element specifies inline text which is to be displayed as superscript for solely typographical reasons. Superscripts are usually rendered with a raised baseline using smaller text. - MDN */
export function sup(attrs: TagAttrs): TagElement;
/** The 'sup' HTML element specifies inline text which is to be displayed as superscript for solely typographical reasons. Superscripts are usually rendered with a raised baseline using smaller text. - MDN */
export function sup(data: TagData): TagElement;
/** The 'sup' HTML element specifies inline text which is to be displayed as superscript for solely typographical reasons. Superscripts are usually rendered with a raised baseline using smaller text. - MDN */
export function sup(attrs: TagAttrs, data: TagData): TagElement;
export function sup(a?: any, b?: any): TagElement {
  return tag('sup', a, b);
}

/** The svg element is a container that defines a new coordinate system and viewport. It is used as the outermost element of SVG documents, but it can also be used to embed an SVG fragment inside an SVG or HTML document. - MDN */
export function svg(): TagElement;
/** The svg element is a container that defines a new coordinate system and viewport. It is used as the outermost element of SVG documents, but it can also be used to embed an SVG fragment inside an SVG or HTML document. - MDN */
export function svg(attrs: TagAttrs): TagElement;
/** The svg element is a container that defines a new coordinate system and viewport. It is used as the outermost element of SVG documents, but it can also be used to embed an SVG fragment inside an SVG or HTML document. - MDN */
export function svg(data: TagData): TagElement;
/** The svg element is a container that defines a new coordinate system and viewport. It is used as the outermost element of SVG documents, but it can also be used to embed an SVG fragment inside an SVG or HTML document. - MDN */
export function svg(attrs: TagAttrs, data: TagData): TagElement;
export function svg(a?: any, b?: any): TagElement {
  return tag('svg', a, b);
}

/** The 'table' HTML element represents tabular data — that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data. - MDN */
export function table(): TagElement;
/** The 'table' HTML element represents tabular data — that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data. - MDN */
export function table(attrs: TagAttrs): TagElement;
/** The 'table' HTML element represents tabular data — that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data. - MDN */
export function table(data: TagData): TagElement;
/** The 'table' HTML element represents tabular data — that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data. - MDN */
export function table(attrs: TagAttrs, data: TagData): TagElement;
export function table(a?: any, b?: any): TagElement {
  return tag('table', a, b);
}

/** The 'tbody' HTML element encapsulates a set of table rows (tr elements), indicating that they comprise the body of the table (table). - MDN */
export function tbody(): TagElement;
/** The 'tbody' HTML element encapsulates a set of table rows (tr elements), indicating that they comprise the body of the table (table). - MDN */
export function tbody(attrs: TagAttrs): TagElement;
/** The 'tbody' HTML element encapsulates a set of table rows (tr elements), indicating that they comprise the body of the table (table). - MDN */
export function tbody(data: TagData): TagElement;
/** The 'tbody' HTML element encapsulates a set of table rows (tr elements), indicating that they comprise the body of the table (table). - MDN */
export function tbody(attrs: TagAttrs, data: TagData): TagElement;
export function tbody(a?: any, b?: any): TagElement {
  return tag('tbody', a, b);
}

/** The 'td' HTML element defines a cell of a table that contains data. It participates in the table model. - MDN */
export function td(): TagElement;
/** The 'td' HTML element defines a cell of a table that contains data. It participates in the table model. - MDN */
export function td(attrs: TagAttrs): TagElement;
/** The 'td' HTML element defines a cell of a table that contains data. It participates in the table model. - MDN */
export function td(data: TagData): TagElement;
/** The 'td' HTML element defines a cell of a table that contains data. It participates in the table model. - MDN */
export function td(attrs: TagAttrs, data: TagData): TagElement;
export function td(a?: any, b?: any): TagElement {
  return tag('td', a, b);
}

/** The 'template' HTML element is a mechanism for holding HTML that is not to be rendered immediately when a page is loaded but may be instantiated subsequently during runtime using JavaScript. - MDN */
export function template(): TagElement;
/** The 'template' HTML element is a mechanism for holding HTML that is not to be rendered immediately when a page is loaded but may be instantiated subsequently during runtime using JavaScript. - MDN */
export function template(attrs: TagAttrs): TagElement;
/** The 'template' HTML element is a mechanism for holding HTML that is not to be rendered immediately when a page is loaded but may be instantiated subsequently during runtime using JavaScript. - MDN */
export function template(data: TagData): TagElement;
/** The 'template' HTML element is a mechanism for holding HTML that is not to be rendered immediately when a page is loaded but may be instantiated subsequently during runtime using JavaScript. - MDN */
export function template(attrs: TagAttrs, data: TagData): TagElement;
export function template(a?: any, b?: any): TagElement {
  return tag('template', a, b);
}

/** The 'textarea' HTML element represents a multi-line plain-text editing control, useful when you want to allow users to enter a sizeable amount of free-form text, for example a comment on a review or feedback form. - MDN */
export function textarea(): TagElement;
/** The 'textarea' HTML element represents a multi-line plain-text editing control, useful when you want to allow users to enter a sizeable amount of free-form text, for example a comment on a review or feedback form. - MDN */
export function textarea(attrs: TagAttrs): TagElement;
/** The 'textarea' HTML element represents a multi-line plain-text editing control, useful when you want to allow users to enter a sizeable amount of free-form text, for example a comment on a review or feedback form. - MDN */
export function textarea(data: TagData): TagElement;
/** The 'textarea' HTML element represents a multi-line plain-text editing control, useful when you want to allow users to enter a sizeable amount of free-form text, for example a comment on a review or feedback form. - MDN */
export function textarea(attrs: TagAttrs, data: TagData): TagElement;
export function textarea(a?: any, b?: any): TagElement {
  return tag('textarea', a, b);
}

/** The 'tfoot' HTML element defines a set of rows summarizing the columns of the table. - MDN */
export function tfoot(): TagElement;
/** The 'tfoot' HTML element defines a set of rows summarizing the columns of the table. - MDN */
export function tfoot(attrs: TagAttrs): TagElement;
/** The 'tfoot' HTML element defines a set of rows summarizing the columns of the table. - MDN */
export function tfoot(data: TagData): TagElement;
/** The 'tfoot' HTML element defines a set of rows summarizing the columns of the table. - MDN */
export function tfoot(attrs: TagAttrs, data: TagData): TagElement;
export function tfoot(a?: any, b?: any): TagElement {
  return tag('tfoot', a, b);
}

/** The 'th' HTML element defines a cell as header of a group of table cells. The exact nature of this group is defined by the scope and headers attributes. - MDN */
export function th(): TagElement;
/** The 'th' HTML element defines a cell as header of a group of table cells. The exact nature of this group is defined by the scope and headers attributes. - MDN */
export function th(attrs: TagAttrs): TagElement;
/** The 'th' HTML element defines a cell as header of a group of table cells. The exact nature of this group is defined by the scope and headers attributes. - MDN */
export function th(data: TagData): TagElement;
/** The 'th' HTML element defines a cell as header of a group of table cells. The exact nature of this group is defined by the scope and headers attributes. - MDN */
export function th(attrs: TagAttrs, data: TagData): TagElement;
export function th(a?: any, b?: any): TagElement {
  return tag('th', a, b);
}

/** The 'thead' HTML element defines a set of rows defining the head of the columns of the table. - MDN */
export function thead(): TagElement;
/** The 'thead' HTML element defines a set of rows defining the head of the columns of the table. - MDN */
export function thead(attrs: TagAttrs): TagElement;
/** The 'thead' HTML element defines a set of rows defining the head of the columns of the table. - MDN */
export function thead(data: TagData): TagElement;
/** The 'thead' HTML element defines a set of rows defining the head of the columns of the table. - MDN */
export function thead(attrs: TagAttrs, data: TagData): TagElement;
export function thead(a?: any, b?: any): TagElement {
  return tag('thead', a, b);
}

/** The 'time' HTML element represents a specific period in time. It may include the datetime attribute to translate dates into machine-readable format, allowing for better search engine results or custom features such as reminders. - MDN */
export function time(): TagElement;
/** The 'time' HTML element represents a specific period in time. It may include the datetime attribute to translate dates into machine-readable format, allowing for better search engine results or custom features such as reminders. - MDN */
export function time(attrs: TagAttrs): TagElement;
/** The 'time' HTML element represents a specific period in time. It may include the datetime attribute to translate dates into machine-readable format, allowing for better search engine results or custom features such as reminders. - MDN */
export function time(data: TagData): TagElement;
/** The 'time' HTML element represents a specific period in time. It may include the datetime attribute to translate dates into machine-readable format, allowing for better search engine results or custom features such as reminders. - MDN */
export function time(attrs: TagAttrs, data: TagData): TagElement;
export function time(a?: any, b?: any): TagElement {
  return tag('time', a, b);
}

/** The 'title' HTML element defines the document's title that is shown in a Browser's title bar or a page's tab. It only contains text; tags within the element are ignored. - MDN */
export function title(): TagElement;
/** The 'title' HTML element defines the document's title that is shown in a Browser's title bar or a page's tab. It only contains text; tags within the element are ignored. - MDN */
export function title(attrs: TagAttrs): TagElement;
/** The 'title' HTML element defines the document's title that is shown in a Browser's title bar or a page's tab. It only contains text; tags within the element are ignored. - MDN */
export function title(data: TagData): TagElement;
/** The 'title' HTML element defines the document's title that is shown in a Browser's title bar or a page's tab. It only contains text; tags within the element are ignored. - MDN */
export function title(attrs: TagAttrs, data: TagData): TagElement;
export function title(a?: any, b?: any): TagElement {
  return tag('title', a, b);
}

/** 	The 'tr' HTML element defines a row of cells in a table. The row's cells can then be established using a mix of td (data cell) and th (header cell) elements. - MDN */
export function tr(): TagElement;
/** 	The 'tr' HTML element defines a row of cells in a table. The row's cells can then be established using a mix of td (data cell) and th (header cell) elements. - MDN */
export function tr(attrs: TagAttrs): TagElement;
/** 	The 'tr' HTML element defines a row of cells in a table. The row's cells can then be established using a mix of td (data cell) and th (header cell) elements. - MDN */
export function tr(data: TagData): TagElement;
/** 	The 'tr' HTML element defines a row of cells in a table. The row's cells can then be established using a mix of td (data cell) and th (header cell) elements. - MDN */
export function tr(attrs: TagAttrs, data: TagData): TagElement;
export function tr(a?: any, b?: any): TagElement {
  return tag('tr', a, b);
}

/** The 'track' HTML element is used as a child of the media elements, audio and video. It lets you specify timed text tracks (or time-based data), for example to automatically handle subtitles. The tracks are formatted in WebVTT format (.vtt files) — Web Video Text Tracks. - MDN */
export function track(): TagElement;
/** The 'track' HTML element is used as a child of the media elements, audio and video. It lets you specify timed text tracks (or time-based data), for example to automatically handle subtitles. The tracks are formatted in WebVTT format (.vtt files) — Web Video Text Tracks. - MDN */
export function track(attrs: TagAttrs): TagElement;
export function track(a?: any): TagElement {
  return tag('track', a);
}
/** The 'u' HTML element represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation. This is rendered by default as a simple solid underline, but may be altered using CSS. - MDN */
export function u(): TagElement;
/** The 'u' HTML element represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation. This is rendered by default as a simple solid underline, but may be altered using CSS. - MDN */
export function u(attrs: TagAttrs): TagElement;
/** The 'u' HTML element represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation. This is rendered by default as a simple solid underline, but may be altered using CSS. - MDN */
export function u(data: TagData): TagElement;
/** The 'u' HTML element represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation. This is rendered by default as a simple solid underline, but may be altered using CSS. - MDN */
export function u(attrs: TagAttrs, data: TagData): TagElement;
export function u(a?: any, b?: any): TagElement {
  return tag('u', a, b);
}

/** The 'ul' HTML element represents an unordered list of items, typically rendered as a bulleted list. - MDN */
export function ul(): TagElement;
/** The 'ul' HTML element represents an unordered list of items, typically rendered as a bulleted list. - MDN */
export function ul(attrs: TagAttrs): TagElement;
/** The 'ul' HTML element represents an unordered list of items, typically rendered as a bulleted list. - MDN */
export function ul(data: TagData): TagElement;
/** The 'ul' HTML element represents an unordered list of items, typically rendered as a bulleted list. - MDN */
export function ul(attrs: TagAttrs, data: TagData): TagElement;
export function ul(a?: any, b?: any): TagElement {
  return tag('ul', a, b);
}

/** 	The 'var' HTML element represents the name of a variable in a mathematical expression or a programming context. It's typically presented using an italicized version of the current typeface, although that behavior is browser-dependent. - MDN */
export function _var(): TagElement;
/** 	The 'var' HTML element represents the name of a variable in a mathematical expression or a programming context. It's typically presented using an italicized version of the current typeface, although that behavior is browser-dependent. - MDN */
export function _var(attrs: TagAttrs): TagElement;
/** 	The 'var' HTML element represents the name of a variable in a mathematical expression or a programming context. It's typically presented using an italicized version of the current typeface, although that behavior is browser-dependent. - MDN */
export function _var(data: TagData): TagElement;
/** 	The 'var' HTML element represents the name of a variable in a mathematical expression or a programming context. It's typically presented using an italicized version of the current typeface, although that behavior is browser-dependent. - MDN */
export function _var(attrs: TagAttrs, data: TagData): TagElement;
export function _var(a?: any, b?: any): TagElement {
  return tag('_var', a, b);
}

/** The 'video' HTML element embeds a media player which supports video playback into the document. You can use 'video' for audio content as well, but the audio element may provide a more appropriate user experience. - MDN */
export function video(): TagElement;
/** The 'video' HTML element embeds a media player which supports video playback into the document. You can use 'video' for audio content as well, but the audio element may provide a more appropriate user experience. - MDN */
export function video(attrs: TagAttrs): TagElement;
/** The 'video' HTML element embeds a media player which supports video playback into the document. You can use 'video' for audio content as well, but the audio element may provide a more appropriate user experience. - MDN */
export function video(data: TagData): TagElement;
/** The 'video' HTML element embeds a media player which supports video playback into the document. You can use 'video' for audio content as well, but the audio element may provide a more appropriate user experience. - MDN */
export function video(attrs: TagAttrs, data: TagData): TagElement;
export function video(a?: any, b?: any): TagElement {
  return tag('video', a, b);
}

/** The 'wbr' HTML element represents a word break opportunity—a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location. - MDN */
export function wbr(): TagElement;
/** The 'wbr' HTML element represents a word break opportunity—a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location. - MDN */
export function wbr(attrs: TagAttrs): TagElement;
export function wbr(a?: any): TagElement {
  return tag('wbr', a);
}
